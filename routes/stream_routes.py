from flask import Blueprint, render_template, Response, redirect, url_for, session
import cv2
from services.detect import VideoCamera
from services.detect import active_cameras
from utils.user_camera_utils import get_user_cameras

stream_bp = Blueprint('stream', __name__)


@stream_bp.route('/stream/<cam_id>')
def stream_page(cam_id):
    """
    Renders the camera stream page for a specific camera ID.

    This function first verifies if the user is logged in. If not, it redirects them to the login page.
    It then retrieves the user's camera configurations and checks if the requested `cam_id` is authorized for the current user.
    If the camera is not authorized, it returns a 401 Unauthorized error.
    Finally, it ensures that a `VideoCamera` instance for the specified `cam_id` is active. If not, or if the existing
    camera's capture is not open, a new `VideoCamera` instance is created and stored in `active_cameras`.
    The function then renders the `stream.html` template, passing the `cam_id` to the template.
    """
    if not session.get('logged_in'):
        return redirect(url_for('auth.login'))

    username = session['username']
    user_cameras_config = get_user_cameras(username)

    if cam_id not in user_cameras_config:
        return "Unauthorized", 401

    rtsp_url = user_cameras_config[cam_id]['rtsp_url']
    if cam_id not in active_cameras or \
       (isinstance(active_cameras[cam_id].cap, cv2.VideoCapture) and not active_cameras[cam_id].cap.isOpened()):
        active_cameras[cam_id] = VideoCamera(rtsp_url, cam_id)

    return render_template('stream.html', cam_id=cam_id)


@stream_bp.route('/video_feed/<cam_id>')
def video_feed(cam_id):
    """
    Provides a real-time video feed for a specific camera ID.

    This function first checks if the user is authenticated; if not, it returns an unauthorized error.
    It then verifies if the requested `cam_id` is associated with the logged-in user. If the camera
    is not found in the user's configuration, a 401 Unauthorized error is returned.
    If a `VideoCamera` instance for the `cam_id` does not exist in `active_cameras`, it creates a new one
    using the camera's RTSP URL from the user's configuration.
    Finally, it returns a `Response` object that streams the video frames generated by the `VideoCamera` instance
    as a multipart mixed-replace content type, suitable for embedding live video in web pages.
    """
    if not session.get('logged_in'):
        return "Unauthorized", 401

    username = session['username']
    user_cameras_config = get_user_cameras(username)
    if cam_id not in user_cameras_config:
        return "Unauthorized", 401

    if cam_id not in active_cameras:
        rtsp_url = user_cameras_config[cam_id]['rtsp_url']
        active_cameras[cam_id] = VideoCamera(rtsp_url, cam_id)

    return Response(active_cameras[cam_id].generate(),
                    mimetype='multipart/x-mixed-replace; boundary=frame')